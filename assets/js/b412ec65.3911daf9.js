"use strict";(self.webpackChunkcosmwasmsauru=self.webpackChunkcosmwasmsauru||[]).push([[8391],{1958:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"core/architecture/pinning","title":"Pinning","description":"Contract pinning is a feature of the CosmWasm virtual machine which ensures that a previously stored","source":"@site/docs/core/architecture/pinning.md","sourceDirName":"core/architecture","slug":"/core/architecture/pinning","permalink":"/docs/core/architecture/pinning","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Pinning","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Gas","permalink":"/docs/core/architecture/gas"},"next":{"title":"Transactions","permalink":"/docs/core/architecture/transactions"}}');var i=s(4848),c=s(8453);const r={title:"Pinning",sidebar_position:5},o="Contract pinning",a={},h=[{value:"The caches",id:"the-caches",level:2},{value:"Pinning and Unpinning",id:"pinning-and-unpinning",level:2},{value:"Best practices",id:"best-practices",level:2},{value:"History",id:"history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"contract-pinning",children:"Contract pinning"})}),"\n",(0,i.jsx)(n.p,{children:"Contract pinning is a feature of the CosmWasm virtual machine which ensures that a previously stored\ncompiled contract code (module) is started from a dedicated in-memory cache. Starting a module from\nmemory takes ~45\xa0\xb5s compared to 1.5\xa0ms when loaded from disk (33x faster)."}),"\n",(0,i.jsxs)(n.p,{children:["In contrast to the node-specific Least Recently Used (LRU) memory cache, pinning ",(0,i.jsx)(n.strong,{children:"guarantees"})," this\nperformance boost across the network. As a consequence wasmd can charge ",(0,i.jsx)(n.a,{href:"https://github.com/CosmWasm/wasmd/pull/1799",children:"discounted gas cost"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["::: tip ","\ud83d\udca1"," Tip"]}),"\n",(0,i.jsxs)(n.p,{children:["Pinning is an incredibly valuable tool for chains to optimize gas costs.\nAccording to a ",(0,i.jsx)(n.a,{href:"https://medium.com/confio/neutron-case-study-optimizing-gas-usage-with-contract-pinning-5970a109c706",children:"case study"})," by one of our subscribers, Neutron, pinning improved\nthe gas cost of their contracts somewhere between 15 and 50%!"]}),"\n",(0,i.jsx)(n.p,{children:":::"}),"\n",(0,i.jsx)(n.h2,{id:"the-caches",children:"The caches"}),"\n",(0,i.jsx)(n.p,{children:"CosmWasm has 3 different caches for modules:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileSystemCache"})," the ",(0,i.jsx)(n.code,{children:".module"})," files stored in the cache directory of the node."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"InMemoryCache"})," the LRU cache."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PinnedMemoryCache"})," a separate cache."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Both memory caches (",(0,i.jsx)(n.strong,{children:"2."})," and ",(0,i.jsx)(n.strong,{children:"3."}),") work the same in terms of performance but their elements\nare tracked separately. A pinned contract is never added to the standard ",(0,i.jsx)(n.code,{children:"InMemoryCache"}),"\nand the size of pinned contracts is not counted towards its cache size limit."]}),"\n",(0,i.jsx)(n.h2,{id:"pinning-and-unpinning",children:"Pinning and Unpinning"}),"\n",(0,i.jsxs)(n.p,{children:["In order to add a contract to the ",(0,i.jsx)(n.code,{children:"PinnedMemoryCache"}),", you need to call ",(0,i.jsx)(n.a,{href:"https://docs.rs/cosmwasm-vm/latest/cosmwasm_vm/struct.Cache.html#method.pin",children:(0,i.jsx)(n.code,{children:"Cache::pin"})})," in Rust or\n",(0,i.jsx)(n.code,{children:"func (vm *VM) Pin(checksum Checksum) error"})," in wasmvm. To remove a contract from the cache use\n",(0,i.jsx)(n.a,{href:"https://docs.rs/cosmwasm-vm/latest/cosmwasm_vm/struct.Cache.html#method.unpin",children:(0,i.jsx)(n.code,{children:"Cache::unpin"})})," / ",(0,i.jsx)(n.code,{children:"func (vm *VM) Unpin(checksum Checksum) error"}),". In both cases a contract is\nidentified by its checksum (sha256 hash of the Wasm blob)."]}),"\n",(0,i.jsxs)(n.p,{children:["The VM does not persist pinned memory entries. I.e. you need to call ",(0,i.jsx)(n.code,{children:"Pin"})," every time you start the\nprocess. This is implemented in ",(0,i.jsx)(n.a,{href:"https://github.com/CosmWasm/wasmd/blob/v0.50.0/x/wasm/keeper/keeper.go#L1011-L1028",children:(0,i.jsx)(n.code,{children:"InitializePinnedCodes"})})," in wasmd."]}),"\n",(0,i.jsxs)(n.p,{children:["At the chain level pinning and unpinning are done via governance proposals. See\n",(0,i.jsx)(n.code,{children:"MsgPinCodes"}),"/",(0,i.jsx)(n.code,{children:"MsgUnpinCodes"})," in wasmd."]}),"\n",(0,i.jsxs)(n.p,{children:["When contracts are migrated from one code to another, there is no automatic pinning or unpinning.\nThis is primarily since the migration of a single instance does not mean all instances of the same\ncode become unused. In the future we want to provide hit stats for each checksum in order to easily\nfind unused codes in the ",(0,i.jsx)(n.a,{href:"https://github.com/CosmWasm/cosmwasm/issues/2034",children:"pinned memory cache"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,i.jsxs)(n.p,{children:["Pinning contracts is a balance between increasing memory usage and boosting execution speed.\nContracts that are known to be heavily used should be pinned. This can include contracts that are\nexecuted as part of begin/end block or the IBC light client implementations of the Wasm Light Client\n(",(0,i.jsx)(n.a,{href:"https://github.com/cosmos/ibc-go/tree/main/modules/light-clients/08-wasm",children:"08-wasm"}),"). If a chain is permissioned and runs on a small number of well known contracts, they can\nall be pinned. A permissionless chain might select certain contracts of strategic importance and pin\nthem."]}),"\n",(0,i.jsxs)(n.p,{children:["The estimated size of the pinned contracts is visible in the ",(0,i.jsx)(n.a,{href:"https://github.com/CosmWasm/wasmvm/blob/v2.0.0-rc.2/types/types.go#L174-L185",children:"Metrics"})," struct you can access through\n",(0,i.jsx)(n.a,{href:"https://prometheus.io/",children:"Prometheus"}),". In order to better estimate which contracts are worth pinning, CosmWasm also exports\nmetrics per pinned contract."]}),"\n",(0,i.jsx)(n.p,{children:"These metrics are:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The contract size."}),"\n",(0,i.jsx)(n.li,{children:"The number of times it was loaded from cache."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"That way you can better estimate which contracts are worth keeping pinned."}),"\n",(0,i.jsx)(n.h2,{id:"history",children:"History"}),"\n",(0,i.jsxs)(n.p,{children:["Pinning was developed in 2021 (CosmWasm 0.14) for the Proof of Engagement consensus system\nof ",(0,i.jsx)(n.strong,{children:"Tgrade"})," which required certain contracts to be executed in every block."]})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var t=s(6540);const i={},c=t.createContext(i);function r(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);