"use strict";(self.webpackChunkcosmwasmsauru=self.webpackChunkcosmwasmsauru||[]).push([[7668],{6326:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"core/conventions/enum-dispatch","title":"Enum dispatch","description":"In most production contracts you want to handle multiple message types in a single contract.","source":"@site/docs/core/conventions/enum-dispatch.md","sourceDirName":"core/conventions","slug":"/core/conventions/enum-dispatch","permalink":"/docs/core/conventions/enum-dispatch","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Library feature","permalink":"/docs/core/conventions/library-feature"},"next":{"title":"Tutorial - Extras","permalink":"/docs/category/tutorial---extras"}}');var o=t(4848),r=t(8453);const a={sidebar_position:2},c="Enum dispatch",i={},u=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"enum-dispatch",children:"Enum dispatch"})}),"\n",(0,o.jsx)(n.p,{children:"In most production contracts you want to handle multiple message types in a single contract.\nUnfortunately you can't create multiple endpoints of the same type in a single contract, so you need\nto dispatch based on the message type."}),"\n",(0,o.jsx)(n.p,{children:"The most common way to do this is to use an enum to represent the different message types and then\nmatch on that enum in the endpoint."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-Rust",metastring:'title="contract.rs"',children:'#[cw_serde]\nenum ExecuteMsg {\n    Add { value: i32 },\n    Subtract { value: i32 },\n}\n\n#[cfg_attr(not(feature = "library"), entry_point)]\npub fn execute(\n    deps: DepsMut,\n    env: Env,\n    info: MessageInfo,\n    msg: ExecuteMsg,\n) -> StdResult<Response> {\n    match msg {\n        ExecuteMsg::Add { value } => {\n            // TODO: Add operation\n        }\n        ExecuteMsg::Subtract { value } => {\n            // TODO: Subtract operation\n        }\n    }\n    Ok(Response::new())\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(6540);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);