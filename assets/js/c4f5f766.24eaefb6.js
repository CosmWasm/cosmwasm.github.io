"use strict";(self.webpackChunkcosmwasmsauru=self.webpackChunkcosmwasmsauru||[]).push([[6740],{2769:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"core/entrypoints/entrypoints","title":"Entrypoints","description":"Entrypoints are where your contract can be called from the outside world. You can equate that to","source":"@site/docs/core/entrypoints/entrypoints.md","sourceDirName":"core/entrypoints","slug":"/core/entrypoints/","permalink":"/docs/core/entrypoints/","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/docs/core/installation"},"next":{"title":"Instantiate","permalink":"/docs/core/entrypoints/instantiate"}}');var i=t(4848),r=t(8453);const o={},a="Entrypoints",c={},d=[{value:"Defining entrypoints",id:"defining-entrypoints",level:2},{value:"Entrypoint parameters",id:"entrypoint-parameters",level:2},{value:"Predefined types",id:"predefined-types",level:3},{value:"<code>Deps</code>/<code>DepsMut</code>",id:"depsdepsmut",level:4},{value:"<code>Env</code>",id:"env",level:4},{value:"<code>MessageInfo</code>",id:"messageinfo",level:4},{value:"Defining your own messages",id:"defining-your-own-messages",level:3}];function l(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"entrypoints",children:"Entrypoints"})}),"\n",(0,i.jsxs)(n.p,{children:["Entrypoints are where your contract can be called from the outside world. You can equate that to\nyour ",(0,i.jsx)(n.code,{children:"main"})," function in C, Rust, Java, etc. However, there is one ",(0,i.jsx)(n.em,{children:"small"})," difference: in CosmWasm,\nyou have multiple of these entrypoints, each one different from the last."]}),"\n",(0,i.jsx)(n.p,{children:"In this section we want to give you a quick overview of all the entrypoints and when they are\ncalled."}),"\n",(0,i.jsxs)(n.p,{children:["::: tip ","\ud83d\udca1"," Tip\nIn our examples, we will always refer to ",(0,i.jsx)(n.code,{children:"StdResult"})," as the return type (and therefore ",(0,i.jsx)(n.code,{children:"StdError"})," as the error type).\nThis is just for convenience since every type that implements the ",(0,i.jsx)(n.code,{children:"ToString"})," type can be used as an error type!\nMeaning, as long as it implements ",(0,i.jsx)(n.code,{children:"ToString"}),", nothing is stopping you from defining ",(0,i.jsx)(n.code,{children:"Result<Response, MyError>"}),".\nThis can reduce your code complexity, especially if you want to use the try operator.\n:::"]}),"\n",(0,i.jsx)(n.h2,{id:"defining-entrypoints",children:"Defining entrypoints"}),"\n",(0,i.jsx)(n.p,{children:"While you will learn all about entrypoints in the next sections, we want to give you an idea on how\nto define an entrypoint in the first place."}),"\n",(0,i.jsxs)(n.p,{children:["CosmWasm defines the handy ",(0,i.jsx)(n.code,{children:"#[entry_point]"}),' attribute macro. You simply annotate a function with it,\nand it automatically generates code that communicates to the VM: "Hey! This is an entrypoint, please\nuse it when needed!"']}),"\n",(0,i.jsxs)(n.p,{children:["::: tip ","\ud83d\udca1"," Tip\nWhen defining an entrypoint, it is important to use the correct types for the parameters and\nreturn type. Incorrect types will cause errors when trying to call the contract."]}),"\n",(0,i.jsx)(n.p,{children:"In the following sections we will take a look at all possible entrypoints, including the\ncorrect function signature.\n:::"}),"\n",(0,i.jsxs)(n.p,{children:["::: tip ","\ud83d\udca1"," Tip\nEven though the sections will show you to use ",(0,i.jsx)(n.code,{children:"#[entry_point]"}),", it is recommended to define your\nendpoints as ",(0,i.jsx)(n.code,{children:'#[cfg_attr(not(feature = "library"), entry_point)]'}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The reason behind that is that it allows you to reuse your contract as a library.\n:::"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Rust",children:'#[cfg_attr(not(feature = "library"), entry_point)]\npub fn instantiate(\n    deps: DepsMut,\n    env: Env,\n    info: MessageInfo,\n    msg: InstantiateMsg,\n) -> StdResult<Response> {\n    // Do some logic here\n    Ok(Response::default())\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"entrypoint-parameters",children:"Entrypoint parameters"}),"\n",(0,i.jsxs)(n.p,{children:["Entrypoints have a few parameters (as you can see above), some of them are predefined by\n",(0,i.jsx)(n.code,{children:"cosmwasm-std"}),", others are defined by the user themselves."]}),"\n",(0,i.jsx)(n.p,{children:"Here we go over the different predefined types the standard library provides, and how you can define\nyour own types."}),"\n",(0,i.jsx)(n.h3,{id:"predefined-types",children:"Predefined types"}),"\n",(0,i.jsxs)(n.h4,{id:"depsdepsmut",children:[(0,i.jsx)(n.code,{children:"Deps"}),"/",(0,i.jsx)(n.code,{children:"DepsMut"})]}),"\n",(0,i.jsx)(n.p,{children:"These structs provide you access to the:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Storage"}),"\n",(0,i.jsx)(n.li,{children:"VM API"}),"\n",(0,i.jsx)(n.li,{children:"Querier"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The big difference is that ",(0,i.jsx)(n.code,{children:"DepsMut"})," gives you ",(0,i.jsx)(n.em,{children:"mutable"})," access to the storage. This design is\ndeliberate since you, for example, can't mutate the state in the ",(0,i.jsx)(n.code,{children:"query"})," endpoint. Instead of\nrelying on runtime errors, this is made ",(0,i.jsx)(n.em,{children:"irrepresentable"})," through Rust's type system."]}),"\n",(0,i.jsx)(n.h4,{id:"env",children:(0,i.jsx)(n.code,{children:"Env"})}),"\n",(0,i.jsx)(n.p,{children:"This struct provides you with some information of the current state of the environment your contract\nis executed in."}),"\n",(0,i.jsx)(n.p,{children:"The information provided is, for example, the block height, chain ID, transaction info, etc.\nBasically anything you'd ever want to know about the current state of the execution environment!"}),"\n",(0,i.jsx)(n.h4,{id:"messageinfo",children:(0,i.jsx)(n.code,{children:"MessageInfo"})}),"\n",(0,i.jsx)(n.p,{children:"This struct isn't provided to every endpoint, only to a select few."}),"\n",(0,i.jsx)(n.p,{children:"It provides you with some information that might be crucial to you, depending on the operation you\nwant to perform. It contains the sender of the message you just received, and the funds that were\ntransferred along with it to your contract."}),"\n",(0,i.jsx)(n.h3,{id:"defining-your-own-messages",children:"Defining your own messages"}),"\n",(0,i.jsxs)(n.p,{children:["In our examples, you might have seen messages such as ",(0,i.jsx)(n.code,{children:"InstantiateMsg"}),". These messages are actually\n",(0,i.jsx)(n.em,{children:"user-defined"}),", meaning each contract developer has to define them themselves."]}),"\n",(0,i.jsxs)(n.p,{children:["To make this easier our ",(0,i.jsx)(n.code,{children:"cosmwasm-schema"})," crate provides the ",(0,i.jsx)(n.code,{children:"cw_serde"})," attribute macro, to define\nan instantiate message, you simply write this:"]}),"\n",(0,i.jsx)(n.p,{children:"::: code-group"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Rust",metastring:"[instantiate.rs]",children:"#[cw_serde]\nstruct CustomInstantiateMsg {\n  initial_admins: Vec<Addr>,\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:":::"}),"\n",(0,i.jsxs)(n.p,{children:["::: tip ","\ud83d\udca1"," Tip\nThis macro actually just expands into a bunch of ",(0,i.jsx)(n.code,{children:"derive"})," attributes.\nWe provide this simply for your convenience, otherwise you'd have to keep track of all of these derives yourself."]}),"\n",(0,i.jsxs)(n.p,{children:["::: details Without ",(0,i.jsx)(n.code,{children:"#[cw_serde]"})]}),"\n",(0,i.jsx)(n.p,{children:"::: code-group"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Rust",metastring:"[instantiate.rs]",children:"#[derive(\n  serde::Serialize,\n  serde::Deserialize,\n  Clone,\n  Debug,\n  PartialEq,\n  schemars::JsonSchema\n)]\nstruct CustomInstantiateMsg {\n  initial_admins: Vec<Addr>,\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:":::"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);