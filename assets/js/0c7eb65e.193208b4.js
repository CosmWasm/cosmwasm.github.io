"use strict";(self.webpackChunkcosmwasmsauru=self.webpackChunkcosmwasmsauru||[]).push([[6270],{2929:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"core/entrypoints/query","title":"Query","description":"In the previous section we talked about the execute entrypoint.","source":"@site/docs/core/entrypoints/query.md","sourceDirName":"core/entrypoints","slug":"/core/entrypoints/query","permalink":"/docs/core/entrypoints/query","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Execute","permalink":"/docs/core/entrypoints/execute"},"next":{"title":"Migrate","permalink":"/docs/core/entrypoints/migrate"}}');var s=t(4848),o=t(8453);const i={sidebar_position:3},c="Query",a={},u=[{value:"Properly defining a message",id:"properly-defining-a-message",level:2},{value:"Definition",id:"definition",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"query",children:"Query"})}),"\n",(0,s.jsxs)(n.p,{children:["In the previous section we talked about the ",(0,s.jsx)(n.a,{href:"./execute",children:"execute"})," entrypoint.\nThe ",(0,s.jsx)(n.strong,{children:"query"})," entrypoint is actually pretty similar to its sibling ",(0,s.jsx)(n.a,{href:"./execute",children:"execute"}),",\nbut with one key difference: the storage is only accessible ",(0,s.jsx)(n.em,{children:"immutably"}),".\nThis means you can only ",(0,s.jsx)(n.em,{children:"read"})," from the storage but not ",(0,s.jsx)(n.em,{children:"write"})," to it."]}),"\n",(0,s.jsx)(n.h2,{id:"properly-defining-a-message",children:"Properly defining a message"}),"\n",(0,s.jsx)(n.p,{children:"When defining a message for queries, you always return some value.\nTo properly document these return values, you'll want to define them in your schema."}),"\n",(0,s.jsxs)(n.p,{children:["This is where the ",(0,s.jsx)(n.code,{children:"cosmwasm_schema::QueryResponses"})," derive macro comes in."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Rust",metastring:'title="contract.rs"',children:"#[cw_serde]\nstruct GreetResponse {\n  message: String,\n}\n\n#[cw_serde]\nstruct GoodbyeResponse {\n  message: String,\n}\n\n#[cw_serde]\n#[derive(QueryResponses)]\nenum CustomQueryMsg {\n  #[returns(GreetResponse)]\n  Greet,\n  #[returns(GoodbyeResponse)]\n  Goodbye,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"The macro then defines the required code to document the responses in your code properly,\nso you can easily generate, for example, TypeScript types for your contract clients."}),"\n",(0,s.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-Rust",metastring:'title="contract.rs"',children:'#[cfg_attr(not(feature = "library"), entry_point)]\npub fn query(\n    deps: Deps,\n    env: Env,\n    msg: QueryMsg,\n) -> StdResult<QueryResponse> {\n  // TODO: Prepare the response here.\n  Ok(QueryResponse::default())\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);