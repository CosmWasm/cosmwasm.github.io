"use strict";(self.webpackChunkcosmwasmsauru=self.webpackChunkcosmwasmsauru||[]).push([[8069],{8285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"core/architecture/events","title":"Events","description":"CosmWasm can emit [Cosmos Events]. These events are stored in the block execution result as","source":"@site/docs/core/architecture/events.md","sourceDirName":"core/architecture","slug":"/core/architecture/events","permalink":"/docs/core/architecture/events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Actor model","permalink":"/docs/core/architecture/actor-model"},"next":{"title":"Gas","permalink":"/docs/core/architecture/gas"}}');var o=n(4848),r=n(8453);const a={sidebar_position:3},i="Events",c={},d=[{value:"Custom events",id:"custom-events",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"events",children:"Events"})}),"\n",(0,o.jsxs)(t.p,{children:["CosmWasm can emit ",(0,o.jsx)(t.a,{href:"https://docs.cosmos.network/v0.50/learn/advanced/events",children:"Cosmos Events"}),". These events are stored in the block execution result as\nmetadata, allowing the contract to attach metadata to what exactly happened during execution."]}),"\n",(0,o.jsxs)(t.admonition,{type:"tip",children:[(0,o.jsx)(t.p,{children:"Some important details about the keys:"}),(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Whitespaces will be trimmed (i.e. removed from the beginning and end)."}),"\n",(0,o.jsx)(t.li,{children:"Empty keys (that include keys only consisting of whitespaces) are not allowed."}),"\n",(0,o.jsxs)(t.li,{children:["Keys ",(0,o.jsx)(t.em,{children:"can not"})," start with an underscore '",(0,o.jsx)(t.strong,{children:"_"}),"', such keys are reserved for ",(0,o.jsx)(t.strong,{children:"wasmd"}),"."]}),"\n"]})]}),"\n",(0,o.jsxs)(t.p,{children:["By default, CosmWasm emits the ",(0,o.jsx)(t.code,{children:"wasm"})," event to which you can add attributes like so:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-Rust",metastring:'title="wasm_event.rs"',children:'let response: Response<Empty> = Response::new()\n    .add_attribute("custom_attribute", "value");\n'})}),"\n",(0,o.jsx)(t.h2,{id:"custom-events",children:"Custom events"}),"\n",(0,o.jsxs)(t.p,{children:["As mentioned above, CosmWasm only emits the event ",(0,o.jsx)(t.code,{children:"wasm"})," by default. If you want to emit other\nevents, such as domain-specific events like ",(0,o.jsx)(t.code,{children:"user_added"}),", you can construct a fully custom event and\nattach it to the response."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["Note that those custom events will be prefixed with '",(0,o.jsx)(t.strong,{children:"wasm-"}),"' by the runtime."]})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-Rust",metastring:'title="custom_event.rs"',children:'let event = Event::new("custom_event")\n    .add_attribute("custom_attribute", "value");\n\nlet response: Response<Empty> = Response::new()\n    .add_event(event);\n'})})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);