"use strict";(self.webpackChunkcosmwasmsauru=self.webpackChunkcosmwasmsauru||[]).push([[9883],{7795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"core/architecture/actor-model","title":"Actor model","description":"CosmWasm, at its core, is built around the actor model. This prevents some common pitfalls which,","source":"@site/docs/core/architecture/actor-model.md","sourceDirName":"core/architecture","slug":"/core/architecture/actor-model","permalink":"/docs/core/architecture/actor-model","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Semantics","permalink":"/docs/core/architecture/semantics"},"next":{"title":"Events","permalink":"/docs/core/architecture/events"}}');var o=n(4848),a=n(8453);const r={sidebar_position:2},i="Actor model",c={},h=[];function l(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",header:"header",mermaid:"mermaid",p:"p",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"actor-model",children:"Actor model"})}),"\n",(0,o.jsxs)(t.p,{children:["CosmWasm, at its core, is built around the actor model. This prevents some common pitfalls which,\nfor example, Ethereum smart contracts had to fix over the years. The issues mostly revolved around\n",(0,o.jsx)(t.a,{href:"https://ethereum.org/en/developers/docs/smart-contracts/security/#reentrancy",children:"reentrancy issues"})," where we could, for example, call out to another contract before finishing the\ncurrent execution."]}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsx)(t.p,{children:"If you are already familiar with the actor model through, for example, programming in languages\nsuch as Erlang or Elixir, you can skip this page."})}),"\n",(0,o.jsxs)(t.p,{children:['While the term "actor model" sounds fancy, it is actually quite simple. Each contract is an "actor"\nand ',(0,o.jsx)(t.em,{children:"plays"})," a role in the system (pun intended)."]}),"\n",(0,o.jsx)(t.p,{children:"Each actor has its own state and can only be interacted with via messages. This means a contract can\nonly interact with the outside world via messages and only manipulate its own state."}),"\n",(0,o.jsx)(t.p,{children:"Picture two people living in two houses, each house has a mailbox. If person A wants to talk to\nperson B, they write a letter, address it to person B, and send it off. The mailman (or in this\ncase, the chain) will put the letter in person B's mailbox."}),"\n",(0,o.jsx)(t.p,{children:"Person B will then read the letter and can choose to write a response, address it to person A with a\nnote indicating that this is a reply, and send it off once again."}),"\n",(0,o.jsx)(t.p,{children:"No direct interaction is happening here, nobody visits each other's house which would allow them to\nrummage around in their belongings (state). They simply exchange messages and put everything the\nother side needs to know into a message."}),"\n",(0,o.jsx)(t.mermaid,{value:"sequenceDiagram\n    participant A as Person A\n    participant B as Person B\n    note right of A: id: 123<br/>Hello!\n    A ->> B: \xa0\n    note left of B: id: 567<br/>Hello back!<br/>reply-for-id: 123\n    B ->> A: \xa0 "}),"\n",(0,o.jsx)(t.p,{children:"As you can see in the simple graphic above, they simply exchange messages addressed to each other,\nand the messages reference previous messages if need be."}),"\n",(0,o.jsx)(t.admonition,{type:"tip",children:(0,o.jsxs)(t.p,{children:["In CosmWasm you can only pass a single message type to a contract endpoint. If you are wondering\nhow to handle multiple message types, check out the ",(0,o.jsx)(t.a,{href:"../conventions/enum-dispatch",children:"enum dispatch"})," page."]})}),"\n",(0,o.jsx)(t.p,{children:"But how does that fix reentrancy? In CosmWasm, you can only send out messages at the end of a\ncontract execution as part of the response. This ensures you have already written everything to the\nstate, meaning the state can't suddenly change mid-execution and make your contract exhibit buggy\nbehaviour."}),"\n",(0,o.jsxs)(t.p,{children:["CosmWasm effectively forces you to follow the ",(0,o.jsx)(t.a,{href:"https://fravoll.github.io/solidity-patterns/checks_effects_interactions.html",children:"CEI pattern (Checks, Effects, Interactions)"}),' while\nother similar systems only have this as a "best practice".']})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);